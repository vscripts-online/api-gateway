{
  "openapi": "3.0.0",
  "paths": {
    "/account/new_account": {
      "post": {
        "operationId": "AccountController_new_account",
        "summary": "Register a new account",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccountRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns created account data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountNewAccountResponseDTO"
                }
              }
            }
          }
        },
        "tags": [
          "account"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/account/login_url_google": {
      "post": {
        "operationId": "AccountController_login_url_google",
        "summary": "Get account new auth url",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdateGoogleRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns account auth url",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountLoginUrlGoogleResponseDTO"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "If id is not registered": {
                    "value": {
                      "message": "Invalid id",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "account"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/account/sync_size/{id}": {
      "post": {
        "operationId": "AccountController_sync_size",
        "summary": "Sync account available_size and storage_size",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns account auth url",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSyncSizeResponseDTO"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "If id is not registered": {
                    "value": {
                      "message": "Not Found",
                      "statusCode": 404
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "account"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/account/accounts": {
      "get": {
        "operationId": "AccountController_get_accounts",
        "summary": "Get accounts",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "example": 20,
            "schema": {
              "minLength": 0,
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "example": 20,
            "schema": {
              "minLength": 0,
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountSyncSizeResponseDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "account"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/account/{id}": {
      "delete": {
        "operationId": "AccountController_delete_account",
        "summary": "Get accounts",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "If successful": {
                    "value": {
                      "_id": "65ce68bd88c3b9818dbbd690",
                      "storage_size": 16106127360,
                      "available_size": 16106127360,
                      "type": "GOOGLE",
                      "label": "example@gmail.com",
                      "time": "2024-02-15T19:39:08.259Z"
                    }
                  },
                  "If its not successfull (empty response)": {
                    "value": ""
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "account"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/upload": {
      "post": {
        "operationId": "UploadController_upload",
        "summary": "Upload a new file",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "headers": {
                    "type": "string",
                    "format": "json",
                    "example": "[{ key: \"content-type\", value: \"application/json\" }]",
                    "description": "schema: UploadBodyRequestDTO"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "If file is not given": {
                    "value": {
                      "message": "Please upload a file",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "upload"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/user/register": {
      "post": {
        "operationId": "UserController_register",
        "summary": "Register a new user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegisterRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSessionResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "If email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAlreadyExistsExceptionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/user/login": {
      "post": {
        "operationId": "UserController_login",
        "summary": "Login user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSessionResponseDTO"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "If passwords do not matches": {
                    "value": {
                      "message": "Wrong Password",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  },
                  "If email is not registered": {
                    "value": {
                      "message": "User not found",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/user/change_password": {
      "post": {
        "operationId": "UserController_change_password",
        "summary": "Change user password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserChangePasswordRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSessionResponseDTO"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "If passwords do not matches": {
                    "value": {
                      "message": "Wrong Password",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  },
                  "If email is not registered": {
                    "value": {
                      "message": "User not found",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "user"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/user/forgot_password": {
      "post": {
        "operationId": "UserController_forgot_password",
        "summary": "Change user password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserForgotPasswordRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSessionResponseDTO"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "If passwords do not matches": {
                    "value": {
                      "message": "Wrong Password",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  },
                  "If email is not registered": {
                    "value": {
                      "message": "User not found",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/user/change_password_from_forgot": {
      "post": {
        "operationId": "UserController_change_password_from_forgot",
        "summary": "Change user password",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserChangePasswordFromForgotPasswordRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSessionResponseDTO"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "If query is invalid": {
                    "value": {
                      "message": "Invalid query",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  },
                  "If email is not registered": {
                    "value": {
                      "message": "User not found",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  },
                  "If the code was entered incorrectly 3 times": {
                    "value": {
                      "message": "Resend email required",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  },
                  "If the code was incorrect": {
                    "value": {
                      "message": "Invalid code",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  },
                  "If the old password and new password is same": {
                    "value": {
                      "message": "New password can not be equal with current password",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/files": {
      "get": {
        "operationId": "FilesController_get_files",
        "summary": "Advenced search files",
        "parameters": [
          {
            "example": 20,
            "required": false,
            "name": "skip",
            "in": "query",
            "schema": {
              "minLength": 0,
              "default": 0,
              "type": "number"
            }
          },
          {
            "example": 20,
            "required": false,
            "name": "limit",
            "in": "query",
            "schema": {
              "minLength": 0,
              "default": 0,
              "type": "number"
            }
          },
          {
            "example": "65c2589d8fe830a23156b85e",
            "required": false,
            "name": "_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "suc0aNkQ",
            "required": false,
            "name": "slug",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "ffb185daf164738eaecd918901d87722",
            "required": false,
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "2024-02-04T22:23:07.165Z",
            "required": false,
            "name": "time_lte",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "2024-02-04T22:23:07.165Z",
            "required": false,
            "name": "time_gte",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": 104857600,
            "required": false,
            "name": "size_gte",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "example": 104857600,
            "required": false,
            "name": "size_lte",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "example": "video/mp4",
            "required": false,
            "name": "mime_type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "content-type",
            "required": false,
            "name": "headers_key",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "text/html",
            "required": false,
            "name": "headers_value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "65bf9927d638b6736e0037dc",
            "required": false,
            "name": "owner",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": true,
            "required": false,
            "name": "loading_from_cloud_now",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "example": "-_id size",
            "required": false,
            "name": "sort_by",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "successful": {
                    "value": [
                      {
                        "_id": "65ce68bd88c3b9818dbbd690",
                        "time": "2024-02-06T16:09:55.563Z",
                        "name": "dbe6cc3ab3c636e825df33dc9815e79b",
                        "original_name": "Ruel - Face To Face (Official Video).mp4",
                        "mime_type": "video/mp4",
                        "size": 27156162,
                        "slug": "Zu8vFFzb",
                        "headers": [
                          {
                            "key": "content-type",
                            "value": "application/json"
                          }
                        ],
                        "parts": [
                          {
                            "owner": "65bf9927d638b6736e0037dc",
                            "name": "ffb185daf164738eaecd918901d87722",
                            "offset": 0,
                            "size": 27156162,
                            "id": "1ZdUgie1V2TfP9RYRkQ881VX7wgf2LGhS",
                            "uploaded_size": 0
                          }
                        ],
                        "loading_from_cloud_now": false
                      }
                    ]
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "If query validation failed example: size_gte passed as string value": {
                    "value": {
                      "min": "size_gte must not be less than 0",
                      "isInt": "size_gte must be an integer number"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/files/{slug}": {
      "get": {
        "operationId": "FilesController_get_file",
        "summary": "Get file by slug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "If correct slug": {
                    "value": "[File Binary Data]"
                  }
                }
              }
            },
            "description": ""
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "If slug is not exists": {
                    "value": {
                      "message": "File not found",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  },
                  "If file is loading from cloud right now": {
                    "value": {
                      "message": "File is loading",
                      "error": "Bad Request",
                      "statusCode": 400
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "files"
        ]
      }
    }
  },
  "info": {
    "title": "vscripts.online/cdn",
    "description": "",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "NewAccountRequestDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "GOOGLE",
            "enum": [
              "GOOGLE"
            ]
          },
          "label": {
            "type": "string",
            "example": "example@gmail.com"
          }
        },
        "required": [
          "type"
        ]
      },
      "AccountNewAccountResponseDTO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "65ce68bd88c3b9818dbbd690"
          },
          "storage_size": {
            "type": "number",
            "example": 0
          },
          "available_size": {
            "type": "number",
            "example": 0
          },
          "type": {
            "type": "string",
            "example": "GOOGLE",
            "enum": [
              "GOOGLE"
            ]
          },
          "label": {
            "type": "string",
            "example": "example@gmail.com"
          },
          "time": {
            "type": "string",
            "example": "2024-02-15T19:39:08.259Z"
          }
        },
        "required": [
          "_id",
          "storage_size",
          "available_size",
          "type",
          "label",
          "time"
        ]
      },
      "AccountUpdateGoogleRequestDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "65bf9bcf5f7af5dc2f037ab9",
            "minLength": 10
          },
          "client_id": {
            "type": "string",
            "example": "1017277025943-jjl670se9jabhdtira4jt9r8n5h2v1p7.apps.googleusercontent.com",
            "minLength": 10
          },
          "client_secret": {
            "type": "string",
            "example": "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",
            "minLength": 10
          }
        },
        "required": [
          "id",
          "client_id",
          "client_secret"
        ]
      },
      "AccountLoginUrlGoogleResponseDTO": {
        "type": "object",
        "properties": {
          "authUrl": {
            "type": "string",
            "example": "https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive&include_granted_scopes=true&state=65bf9bcf5f7af5dc2f037ab9&response_type=code&client_id=1017277025943-jjl670se9jabhdtira4jt9r8n5h2v1p7.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fcallback_google"
          }
        },
        "required": [
          "authUrl"
        ]
      },
      "AccountSyncSizeResponseDTO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "65ce68bd88c3b9818dbbd690"
          },
          "storage_size": {
            "type": "number",
            "example": 16106127360
          },
          "available_size": {
            "type": "number",
            "example": 16106127360
          },
          "type": {
            "type": "string",
            "example": "GOOGLE",
            "enum": [
              "GOOGLE"
            ]
          },
          "label": {
            "type": "string",
            "example": "example@gmail.com"
          },
          "time": {
            "type": "string",
            "example": "2024-02-15T19:39:08.259Z"
          }
        },
        "required": [
          "_id",
          "storage_size",
          "available_size",
          "type",
          "label",
          "time"
        ]
      },
      "UserRegisterRequestDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "email@example.com",
            "minLength": 5,
            "maxLength": 320
          },
          "password": {
            "type": "string",
            "example": "Strong.Password1",
            "minLength": 8,
            "maxLength": 40,
            "description": "Password must contain at least 1 lowercase, 1 uppercase, and 1 numeric character."
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "UserSessionResponseDTO": {
        "type": "object",
        "properties": {
          "session": {
            "type": "string",
            "example": "Zcon63hwvDO-wt7H|7BR4flOxTUv8yom6wGDXwQ"
          }
        },
        "required": [
          "session"
        ]
      },
      "UserAlreadyExistsExceptionDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Bad Request"
          },
          "statusCode": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Email already exists"
          }
        },
        "required": [
          "error",
          "statusCode",
          "message"
        ]
      },
      "UserNotFoundExceptionDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Bad Request"
          },
          "statusCode": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "User not found"
          }
        },
        "required": [
          "error",
          "statusCode",
          "message"
        ]
      },
      "UserWrongPasswordExceptionDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Bad Request"
          },
          "statusCode": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Wrong Password"
          }
        },
        "required": [
          "error",
          "statusCode",
          "message"
        ]
      },
      "UserLoginRequestDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "email@example.com",
            "minLength": 5,
            "maxLength": 320
          },
          "password": {
            "type": "string",
            "example": "Strong.Password1",
            "minLength": 8,
            "maxLength": 40,
            "description": "Password must contain at least 1 lowercase, 1 uppercase, and 1 numeric character."
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "UserChangePasswordRequestDTO": {
        "type": "object",
        "properties": {
          "current_password": {
            "type": "string",
            "example": "Strong.Password1",
            "minLength": 8,
            "maxLength": 40,
            "description": "Password must contain at least 1 lowercase, 1 uppercase, and 1 numeric character."
          },
          "password": {
            "type": "string",
            "example": "Strong.Password2",
            "minLength": 8,
            "maxLength": 40,
            "description": "Can not be equal with current password"
          }
        },
        "required": [
          "current_password",
          "password"
        ]
      },
      "UserForgotPasswordRequestDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "email@example.com",
            "minLength": 5,
            "maxLength": 320
          }
        },
        "required": [
          "email"
        ]
      },
      "UserForgotPasswordInvalidQueryExceptionDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Bad Request"
          },
          "statusCode": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Invalid query"
          }
        },
        "required": [
          "error",
          "statusCode",
          "message"
        ]
      },
      "UserResendEmailRequiredExceptionDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Bad Request"
          },
          "statusCode": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Resend email required"
          }
        },
        "required": [
          "error",
          "statusCode",
          "message"
        ]
      },
      "UserForgotPasswordInvalidCodeExceptionDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Bad Request"
          },
          "statusCode": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Invalid code"
          }
        },
        "required": [
          "error",
          "statusCode",
          "message"
        ]
      },
      "UserPasswordEqualityExceptionDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Bad Request"
          },
          "statusCode": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "New password can not be equal with current password"
          }
        },
        "required": [
          "error",
          "statusCode",
          "message"
        ]
      },
      "UserChangePasswordFromForgotPasswordRequestDTO": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "example": "Strong.Password1",
            "minLength": 8,
            "maxLength": 40,
            "description": "Password must contain at least 1 lowercase, 1 uppercase, and 1 numeric character."
          }
        },
        "required": [
          "query",
          "password"
        ]
      },
      "UploadBodyRequestHeadersDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "minLength": 1
          },
          "value": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "UploadBodyRequestDTO": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadBodyRequestHeadersDTO"
            }
          }
        }
      }
    }
  }
}